`timescale 1ns/10ps

module sync_fifo

#(

   parameter data_width    = 4,

   parameter address_width = 4,

   parameter ram_depth     = 16)

(

   output [data_width-1:0] data_out,

   output      full,

   output      empty,

   input [data_width-1:0]  data_in,

   input      clk,

   input      rst_a,

   input      wr_en,

   input      rd_en

);

//--------------internal register declaration

   logic [address_width-1 : 0]                     wr_pointer;

   logic [address_width-1 : 0]                     rd_pointer;

   logic [address_width : 0]                     status_count;

   logic [data_width-1:0]                        data_out ;

   logic [ram_depth - 1:0][data_width-1:0]       data_ram ;

 

//--------------wr_pointer pointing to write address

   always_ff @ (posedge clk, posedge rst_a)

   begin

   if(rst_a) wr_pointer <= 0;

   else if(wr_en) begin

                  assert (status_count <= ram_depth) else $fatal(1,"Overflow of a fifo");

                  //assert (full == 0) else $fatal(1,"Overflow of a fifo");

                  data_ram[wr_pointer] <= data_in;

                  wr_pointer <= wr_pointer+1;

                  end

   end

//-------------read from FIFO

   always_ff @ (posedge clk, posedge rst_a)

   begin

   if(rst_a) rd_pointer <= 0;

   else if(rd_en) begin

                  assert (status_count >= 0) else $fatal(1,"Underflow of a fifo");

                  data_out <= data_ram[rd_pointer];

                  rd_pointer <= rd_pointer+1;

                  end

   end


//--------------Status pointer for full and empty checking

   always_ff @ (posedge clk,posedge rst_a)

   begin

   if(rst_a) status_count <= 0;

   else begin

   if(wr_en && !rd_en && status_count != ram_depth) status_count <= status_count + 1;

   else if(rd_en && !wr_en && (status_count != 0))  status_count <= status_count - 1;

   end // always @ (posedge clk,posedge rst_a)

end

 

assign full = (status_count >= ram_depth);

assign empty = (status_count <= 0);

 

endmodule // sync_fifo   